

import requests
import time
import json
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
import os
import threading


class SteamMonitor:
    def __init__(self):
        self.BOT_TOKEN = '8254467296:AAGdY52lthfUJkBf7KVPbR_-a0_fHbKn6Ug'
        self.CHAT_ID = '894710522'

        # –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.items = [
            {
                'name': 'Autographed Prison Shank',
                'url': 'https://steamcommunity.com/market/listings/570/Autographed%20Prison%20Shank#',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=17778413'
            },
            {
                'name': 'Inscribed Magnificent Flame',
                'url': 'https://steamcommunity.com/market/listings/570/Inscribed%20Magnificent%20Flame',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15822742'
            },
            {
                'name': "Emissary's Blade",
                'url': 'https://steamcommunity.com/market/listings/570/Emissary%27s%20Blade',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15186154'
            },
            {
                'name': 'Enchanted Vision',
                'url': 'https://steamcommunity.com/market/listings/570/Enchanted%20Vision',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15809647'
            },
            {
                'name': 'Bow of the Lone Traveler',
                'url': 'https://steamcommunity.com/market/listings/570/Bow%20of%20the%20Lone%20Traveler',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15809652'
            },
            {
                'name': 'Catastrophe',
                'url': 'https://steamcommunity.com/market/listings/570/Catastrophe',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15805332'
            },
            {
                'name': "Red General's Soul Splitter",
                'url': 'https://steamcommunity.com/market/listings/570/Red%20General%27s%20Soul%20Splitter',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15809657'
            },
            {
                'name': 'Autographed White Sentry',
                'url': 'https://steamcommunity.com/market/listings/570/Autographed%20White%20Sentry',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15809654'
            },
            {
                'name': 'Inscribed Staff of the Lunar Tree',
                'url': 'https://steamcommunity.com/market/listings/570/Inscribed%20Staff%20of%20the%20Lunar%20Tree',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=15816987'
            },
            {
                'name': 'Autographed Lesser Purifier',
                'url': 'https://steamcommunity.com/market/listings/570/Autographed%20Lesser%20Purifier',
                'api_url': 'https://steamcommunity.com/market/itemordershistogram?country=RU&language=english&currency=5&item_nameid=17419510'
            }
        ]

        self.previous_data = {}  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        self.active_orders = {}  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {item_name: {'price': price, 'item_url': url}}
        self.request_count = 0
        self.driver = None
        self.session = requests.Session()

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Steam
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': '*/*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://steamcommunity.com/'
        }

    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver –¥–ª—è Firefox"""
        print("ü¶ä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox WebDriver...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Firefox
        firefox_options = Options()
        # firefox_options.add_argument("--headless")  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        firefox_options.add_argument("--no-sandbox")
        firefox_options.add_argument("--disable-dev-shm-usage")
        firefox_options.add_argument("--width=1200")
        firefox_options.add_argument("--height=800")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        firefox_options.set_preference("dom.webdriver.enabled", False)
        firefox_options.set_preference("useAutomationExtension", False)

        try:
            self.driver = webdriver.Firefox(options=firefox_options)
            self.driver.implicitly_wait(10)
            print("‚úÖ Firefox WebDriver —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebDriver: {e}")
            raise

    def get_initial_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º...")

        for item in self.items:
            try:
                print(f"üîç –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {item['name']}")

                response = requests.get(item['api_url'], headers=self.headers, timeout=15)
                response.raise_for_status()

                data = response.json()

                if (data.get('success') and
                        data.get('buy_order_graph') and
                        len(data['buy_order_graph']) > 0):

                    current_data = data['buy_order_graph'][0]
                    price, quantity, description = current_data

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                    self.previous_data[item['name']] = {
                        'price': price,
                        'quantity': quantity,
                        'description': description
                    }

                    print(f"‚úÖ {item['name']}: {price} —Ä—É–±., {quantity} —à—Ç.")

                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {item['name']}")
                    self.previous_data[item['name']] = None

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {item['name']}: {e}")
                self.previous_data[item['name']] = None

            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

    def steam_login_with_qr(self):
        """–†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Steam - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å"""
        print("üîê –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Steam...")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ Steam
            login_url = "https://steamcommunity.com/login/home/"
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞: {login_url}")
            self.driver.get(login_url)

            print("üì± –í –±—Ä–∞—É–∑–µ—Ä–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Steam")
            print("üëÜ –í—Ä—É—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            print("üéØ –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:")
            print("   https://steamcommunity.com/id/idontknowhyoudied/")
            print("‚è≥ –û–∂–∏–¥–∞—é —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏... (–¥–æ 3 –º–∏–Ω—É—Ç)")

            # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            success_url = "https://steamcommunity.com/id/idontknowhyoudied/"

            # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç
            WebDriverWait(self.driver, 180).until(
                EC.url_to_be(success_url)
            )

            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Steam —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìÑ –¢–µ–∫—É—â–∏–π URL: {self.driver.current_url}")

            # –î–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫
            time.sleep(3)

            # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∏–∑ Selenium –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ requests session
            self._transfer_cookies_to_requests()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            print(f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–π URL: {self.driver.current_url}")
            return False

    def create_buy_order(self, item_name, price, item_url):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ"""
        print(f"üí∞ –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {item_name} –ø–æ —Ü–µ–Ω–µ: {price} —Ä—É–±.")

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞: {item_name}")
            self.driver.get(item_url)
            time.sleep(3)

            # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "Place buy order..."
            print("üîç –ò—â—É –∫–Ω–æ–ø–∫—É 'Place buy order...'")
            buy_order_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(@class, 'market_noncommodity_buyorder_button')]"))
            )
            buy_order_button.click()
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Place buy order...' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")
            time.sleep(2)

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –∏ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
            print("üîç –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞...")
            price_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "market_buy_commodity_input_price"))
            )
            print("‚úÖ –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")

            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (—Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
            print("üßπ –û—á–∏—â–∞—é –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã...")
            price_input.clear()  # –°–ø–æ—Å–æ–± 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π clear
            price_input.send_keys(Keys.CONTROL + "a")  # –°–ø–æ—Å–æ–± 2: –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ
            price_input.send_keys(Keys.DELETE)  # –°–ø–æ—Å–æ–± 3: —É–¥–∞–ª–∏—Ç—å
            time.sleep(0.5)

            # –í–≤–æ–¥–∏–º —Ü–µ–Ω—É
            price_input.send_keys(str(price))
            print(f"‚úÖ –í–≤–µ–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {price} —Ä—É–±.")
            time.sleep(1)

            # –°—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É —Å–æ–≥–ª–∞—Å–∏—è
            print("üîç –ò—â—É checkbox —Å–æ–≥–ª–∞—Å–∏—è...")
            checkbox = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "market_buyorder_dialog_accept_ssa"))
            )
            if not checkbox.is_selected():
                checkbox.click()
                print("‚úÖ Checkbox —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–º–µ—á–µ–Ω")
            time.sleep(1)

            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "PLACE ORDER"
            print("üîç –ò—â—É –∫–Ω–æ–ø–∫—É 'PLACE ORDER'...")
            place_order_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "market_buyorder_dialog_purchase"))
            )
            place_order_button.click()
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'PLACE ORDER' –Ω–∞–∂–∞—Ç–∞")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            time.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            try:
                error_elements = self.driver.find_elements(By.CLASS_NAME, "market_buyorder_error")
                if error_elements:
                    error_text = error_elements[0].text
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {error_text}")
                    return False
            except:
                pass

            print("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π
            print("‚è∞ –ñ–¥—É 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π –æ—Ä–¥–µ—Ä–∞...")
            time.sleep(60)

            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
            return self.cancel_buy_order(item_name, item_url)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def cancel_buy_order(self, item_name, item_url):
        """–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        print(f"‚ùå –û—Ç–º–µ–Ω—è—é –æ—Ä–¥–µ—Ä –¥–ª—è {item_name}")

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            self.driver.refresh()
            time.sleep(3)

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å CancelMarketBuyOrder
            print("üîç –ò—â—É —Å—Å—ã–ª–∫—É CancelMarketBuyOrder...")
            cancel_link = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(@href, 'CancelMarketBuyOrder')]"))
            )
            cancel_link.click()
            print("‚úÖ –°—Å—ã–ª–∫–∞ CancelMarketBuyOrder –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
            time.sleep(3)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            message = f"‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω: {item_name}"
            self.send_to_telegram(message)

            print("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {e}")
            return False

    def _transfer_cookies_to_requests(self):
        """–ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫—É–∫–∏ –∏–∑ Selenium –≤ requests session"""
        print("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫—É–∫–∏ –≤ requests session...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            selenium_cookies = self.driver.get_cookies()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫—É–∫ –¥–ª—è requests
            cookies_dict = {}
            for cookie in selenium_cookies:
                cookies_dict[cookie['name']] = cookie['value']

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é requests
            self.session.cookies.update(cookies_dict)

            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self.session.headers.update(self.headers)

            print(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(selenium_cookies)} –∫—É–∫")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∫—É–∫: {e}")

    def monitor_steam(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Steam –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        self.request_count += 1

        print(f'\nüìä –ó–∞–ø—Ä–æ—Å #{self.request_count} –≤ {datetime.now().strftime("%H:%M:%S")}')

        for item in self.items:
            try:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é: {item['name']}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–µ—Å—Å–∏—é —Å –∫—É–∫–∞–º–∏
                response = self.session.get(item['api_url'], timeout=15)
                response.raise_for_status()

                data = response.json()

                if (data.get('success') and
                        data.get('buy_order_graph') and
                        len(data['buy_order_graph']) > 0):

                    current_data = data['buy_order_graph'][0]
                    price, quantity, description = current_data

                    print(f'üíµ {item["name"]}: {price} —Ä—É–±., {quantity} —à—Ç.')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    previous_item_data = self.previous_data.get(item['name'])

                    if (previous_item_data and
                            previous_item_data['price'] != price and
                            item['name'] not in self.active_orders):  # –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π

                        message = (
                            f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞</b>\n"
                            f"üì¶ –ü—Ä–µ–¥–º–µ—Ç: <b>{item['name']}</b>\n"
                            f"üíµ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b> (–±—ã–ª–æ: {previous_item_data['price']} —Ä—É–±.)\n"
                            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b>\n"
                            f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
                        )

                        print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...')
                        self.send_to_telegram(message)

                        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
                        print('üõí –°–æ–∑–¥–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É...')
                        if self.create_buy_order(item['name'], price, item['url']):
                            order_message = f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ {item['name']} —Å–æ–∑–¥–∞–Ω –ø–æ —Ü–µ–Ω–µ {price} —Ä—É–±. (–±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)"
                            self.send_to_telegram(order_message)
                        else:
                            order_message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ {item['name']} –ø–æ —Ü–µ–Ω–µ {price} —Ä—É–±."
                            self.send_to_telegram(order_message)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    self.previous_data[item['name']] = {
                        'price': price,
                        'quantity': quantity,
                        'description': description
                    }

            except Exception as error:
                print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {item["name"]}: {error}')

            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    def send_to_telegram(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f'https://api.telegram.org/bot{self.BOT_TOKEN}/sendMessage'
            payload = {
                'chat_id': self.CHAT_ID,
                'text': message,
                'parse_mode': 'HTML'
            }

            response = requests.post(url, json=payload, timeout=10)
            result = response.json()

            if result.get('ok'):
                print('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
            else:
                print('‚ùå –û—à–∏–±–∫–∞ Telegram:', result)

        except Exception as error:
            print(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error}')

    def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.driver:
            print("üîí –ó–∞–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
            self.driver.quit()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print('üöÄ –ó–∞–ø—É—Å–∫ Steam –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...')

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.get_initial_data()

            # –ü–æ—Ç–æ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            self.setup_selenium()

            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥
            if self.steam_login_with_qr():
                print('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...')
                print('‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 5 —Å–µ–∫—É–Ω–¥')
                print('‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C\n')

                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                self.monitor_steam()

                # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                while True:
                    time.sleep(5)
                    self.monitor_steam()
            else:
                print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Steam')

        except KeyboardInterrupt:
            print('\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        finally:
            self.close_browser()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    monitor = SteamMonitor()
    monitor.run()
